@page "/"
@page "/contacts"
@using FrontendBlazor.Model;
@inject Authentication.AuthenticationService authService
@inject Model.ContactsDAO contactsDao
@inject NavigationManager navigation

<PageTitle>Kontakty</PageTitle>

@if (isAuthenticated)
{
    <button class="btn btn-primary" @onclick="@Logout">Wyloguj</button>
    <a class="btn btn-primary" href="add">Dodaj kontakt</a>
}
else
{
    <a class="btn btn-primary" href="login">Zaloguj się</a>
    <a class="btn btn-primary" href="signup">Zarejestruj się</a>    
}

<h1>Kontakty</h1>

<p class="">
    @message
</p>

@{
    if(contacts.Count == 0)
    {
        <p>Brak kontaktów</p>
    }
    else
    {
        foreach (var contact in contacts)
        {
            <div class="row">
                @if (isAuthenticated)
                {
                    <button class="btn btn-primary col-1" @onclick=@(() => Delete(contact.Id))>
                        Usuń kontakt
                    </button>
                }
                <p class="col-11">
                    <a href="details/@contact.Id">
                        @contact.Name @contact.Surname
                    </a>
                </p>
            </div>
        }
    }
}

@code {
    private string message = string.Empty;
    private List<Contact> contacts = new();

    private bool isAuthenticated = false;

    protected override async Task OnInitializedAsync()
    {
        isAuthenticated = await authService.IsAuthenticated();
        contacts = await contactsDao.GetAll();
    }

    private async Task Delete(int contactId)
    {
        if(await contactsDao.Delete(contactId))
        {
            contacts.Remove(contacts.First(c => c.Id == contactId));
        }
    }

    private async Task Logout()
    {
        if (await authService.Logout())
            isAuthenticated = false;
    }
}
